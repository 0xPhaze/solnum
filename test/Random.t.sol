// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import { M32x32 } from "src/M32x32.sol";
// import "src/M32x32.sol" as sn;
import "src/M32x32.sol";
// import { N32x32, ZERO, ONE, HALF } from "src/N32x32.sol";
// import { Random, seed } from "src/Random.sol";
import "src/N32x32.sol";
import "src/Random.sol";
import { TestHelper, console } from "./utils/TestHelper.sol";

contract TestRandom is TestHelper {
    /* ------------- constructors ------------- */

    function test_rand(uint256 n, uint256 m, uint256 s) public {
        n = bound(n, 1, 10);
        m = bound(m, 1, 10);

        Random r;
        r.setSeed(s);
        M32x32 R = r.rand(n, m);

        assertLt(R, ONE);
        assertGt(R, ZERO);

        // logNum("mean", N32x32.wrap(int64(uint64(R.mean()))));
        // logNum("mean", R.mean());
    }

    function test_rand_mean() public {
        Random r = seed(0);

        M32x32 R = r.rand(1, 10_000);

        assertApproxEqAbs(R.mean(), HALF, ONE.divInt(1_000));
        assertApproxEqAbs(R.vari(), ONE.divInt(12), ONE.divInt(1_000));
    }

    function test_randn() public {
        Random r = seed(0);
        M32x32 R = r.randn(1, 10_000);

        // logNum("min", R.min());
        // logNum("max", R.max());

        assertApproxEqAbs(R.mean(), ZERO, ONE.divInt(100));
        assertApproxEqAbs(R.vari(), ONE, ONE.divInt(100));
    }

    function test_addRandn() public {
        Random r = seed(0);
        M32x32 R = r.randn(1, 100);

        r.setSeed(0);
        M32x32 R2 = r.addRandn(zeros(1, 100), ONE);

        assertEq(R, R2);

        r.setSeed(0);
        R2 = r.addRandn(zeros(1, 100), NEG_ONE).mulInt(-1).addScalar(N32x32.wrap(-1));

        assertEq(R, R2);

        r.setSeed(0);
        N32x32 shift = N32x32.wrap(0x1234fffffffff);
        R2 = r.addRandn(full(1, 100, shift), ONE.mulInt(1337)).addScalar(shift.mulInt(-1));

        assertApproxEqAbs(R.max(), R2.max().divInt(1337), ONE.divInt(1_000_000));
        assertApproxEqAbs(R.min(), R2.min().divInt(1337), ONE.divInt(1_000_000));
    }

    function test_addRandn_revert_Overflow() public {
        Random r = seed(0);
        vm.expectRevert(N32x32_Overflow.selector);

        r.addRandn(full(1, 100, MAX.sub(ONE)), ONE);
    }

    // function test_moons_learn() public {
    //     M32x32 X = fromIntEncoded(
    //         hex""
    //     ).reshape(100, 2);
    //     M32x32 Y = fromIntEncoded(
    //         hex"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"
    //     ).reshape(100, 1);

    //     N32x32 g = ONE.divInt(100);

    //     M32x32 A1 = zeros(2, 32);
    //     M32x32 b1 = zeros(1, 32);
    //     M32x32 A2 = zeros(32, 2);
    //     M32x32 b2 = zeros(1, 2);

    //     M32x32 A1_ = mallocM32x32(2, 32);
    //     M32x32 b1_ = mallocM32x32(1, 32);
    //     M32x32 A2_ = mallocM32x32(32, 2);
    //     M32x32 b2_ = mallocM32x32(1, 2);

    //     N32x32 bestScore;

    //     Random r = seed(0);

    //     for (uint256 i; i < 10; i++) {
    //         r.addRandnTo_(A1, A1_, g);
    //         r.addRandnTo_(b1, b1_, g);

    //         r.addRandnTo_(A2, A2_, g);
    //         r.addRandnTo_(b2, b2_, g);

    //         M32x32 Z = linearReluTransposed(X, A1, b1);
    //         Z = linearTransposed(Z, A2, b2);

    //         N32x32 score = Z.gtScalar(0).eq(Y).sum();

    //         // Z1 = torch.relu(X @ A1_ + b1_)
    //         // Z2 = torch.relu(Z1 @ A2_ + b2_)

    //         // Output = (Z2[:,0] < Z2[:,1]).to(float)

    //         // S = (y == Output).sum()

    //         if (score.gt(bestScore)) {
    //             bestScore = score;

    //             (A1, A1_) = (A1_, A1);
    //             (b1, b1_) = (b1_, b1);
    //             (A2, A2_) = (A2_, A2);
    //             (b2, b2_) = (b2_, b2);
    //         }
    //     }

    //     // logMat(X);
    //     // logMat(Y);

    //     // tensor([1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0,
    //     //         1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
    //     //         1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,
    //     //         1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,
    //     //         1, 0, 1, 1])
    // }

    // function test_randn2() public {
    //     Random r = seed(0);
    //     M32x32 R = r.randn2(1, 10_000);

    //     logNum("min", R.min());
    //     logNum("max", R.max());

    //     // assertLt(R.abs(), ONE.mulInt(10));
    //     // assertGt(R, ZERO);

    //     assertApproxEqAbs(R.mean(), ZERO, ONE.divInt(100));
    //     assertApproxEqAbs(R.vari(), ONE, ONE.divInt(100));
    // }

    function test_xxx(uint256 randomSeed) public {
        // function test_xxx() public {
        // Random r = seed(0);
        // uint256 randomSeed = r.randUint();

        int256 r1;
        assembly {
            // Sample a random normal variable.
            r1 := and(randomSeed, UINT32_MAX_X4) // Add masked halves together.
            r1 := add(r1, shr(32, and(randomSeed, not(UINT32_MAX_X4))))
            r1 := mul(r1, ONES_X4) // Multiply by `1 + (1 << 64) + (1 << 128) + (1 << 192)`.
            // r1 := sar(222, r1)
            r1 := shr(190, r1)
            // r1 := mul(4, r1) // The sum is located at bit pos 192. Multiply by `sqrt(N) = 4`.
            r1 := sub(r1, shl(32, 4)) // Subtract `8 * mean = 4 << 32`.
            r1 := sdiv(r1, 14878203147) // Divide by `sqrt(12) << 32`.
        }

        // Summing 8 packed uint64s.
        int256 sum1;

        unchecked {
            for (uint256 i; i < 8; i++) {
                // sum1 += int32(uint32(randomSeed >> i * 32));
                sum1 += int256(uint256(uint32(randomSeed >> i * 32)));
                // sum1 += int256(int64(uint64(randomSeed >> i * 32)));
            }
        }

        unchecked {
            sum1 = sum1 * 4 - (4 << 32);
            sum1 = sum1 / 14878203147;
        }

        assertEq(r1, sum1);
    }

    // // note: does not handle overflow.
    // function test_packed_arithmetic(
    //     uint32 a1,
    //     uint32 a2,
    //     uint32 a3,
    //     uint32 a4,
    //     uint32 b1,
    //     uint32 b2,
    //     uint32 b3,
    //     uint32 b4
    // ) public {
    //     a1 = uint32(int32(bound(int256(int32(a1)), int256(type(int16).min), int256(type(int16).max))));
    //     a2 = uint32(int32(bound(int256(int32(a2)), int256(type(int16).min), int256(type(int16).max))));
    //     a3 = uint32(int32(bound(int256(int32(a3)), int256(type(int16).min), int256(type(int16).max))));
    //     a4 = uint32(int32(bound(int256(int32(a4)), int256(type(int16).min), int256(type(int16).max))));

    //     b1 = uint32(int32(bound(int256(int32(b1)), int256(type(int16).min), int256(type(int16).max))));
    //     b2 = uint32(int32(bound(int256(int32(b2)), int256(type(int16).min), int256(type(int16).max))));
    //     b3 = uint32(int32(bound(int256(int32(b3)), int256(type(int16).min), int256(type(int16).max))));
    //     b4 = uint32(int32(bound(int256(int32(b4)), int256(type(int16).min), int256(type(int16).max))));

    //     uint256 aX4 = (a1 << 192) | (a2 << 128) | (a3 << 64) | a4;
    //     uint256 bX4 = (b1 << 192) | (b2 << 128) | (b3 << 64) | b4;

    //     int32 c1 = int32(a1) - int32(b1);
    //     int32 c2 = int32(a2) - int32(b2);
    //     int32 c3 = int32(a3) - int32(b3);
    //     int32 c4 = int32(a4) - int32(b4);

    //     uint256 cX4 = (uint256(uint32(c1)) << 192) | (uint256(uint32(c2)) << 128) | (uint256(uint32(c3)) << 64)
    //         | uint256(uint32(c4));

    //     unchecked {
    //         console.logBytes32(bytes32(aX4 - bX4));
    //         assertEq(aX4 - bX4, cX4);
    //     }
    // }
}

// contract TestGasRandom {
//     function test_perf_rand_128() public pure {
//         Random r = seed(0);

//         r.rand(128, 128);
//     }
// }
